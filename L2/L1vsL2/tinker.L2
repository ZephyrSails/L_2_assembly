(:go
  (:go
    0 0
    (rdi <- 5)
    (rsi <- 7)
    (call allocate 2)
    (rdi <- rax)
    ((mem rsp -8) <- :printArray_ret)
    (call :printArray 1)
    :printArray_ret
    (return)
  )

  (:printArray
    1 0

    (arr <- rdi)
    (i <- 0)
    (len <- (mem rdi 0))

    :loop
    (rdi <- arr)
    (rsi <- i)
    ((mem rsp -8) <- :printArrayElement_ret)
    (call :printArrayElement 2)
    :printArrayElement_ret
    (i++)

    (cjump i < len :loop :ret)

    :ret

    (return)
  )

  (:printArrayElement
    2 0
    (arr <- rdi)
    (index <- rsi)
    (rdi <- index)
    (rdi <<= 1)
    (rdi++)
    (call print 1)

    (offset <- index)
    (offset *= 8)

    (offset += 8)
    (offset <<= 1)
    (offset++)
    (rdi <- offset)
    (call print 1)
    (offset >>= 1)


    (addr <- offset)
    (addr += arr)
    (ele <- (mem addr 0))
    (ele &= 1)

    (cjump ele = 1 :printEle :recurseArr)

    :printEle
    (rdi <- (mem addr 0))
    (call print 1)
    (return)

    :recurseArr
    (rdi <- (mem addr 0))
    ((mem rsp -8) <- :ret_printArrayElement)
    (call :printArray 1)

    :ret_printArrayElement

    (return)
  )
)
